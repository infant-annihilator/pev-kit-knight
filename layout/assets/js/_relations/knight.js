/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./layout/assets/js/abstract-main/character.js":
/*!*****************************************************!*\
  !*** ./layout/assets/js/abstract-main/character.js ***!
  \*****************************************************/
/*! namespace exports */
/*! export Character [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Character\": () => /* binding */ Character\n/* harmony export */ });\n/**\r\n * Абстрактный класс персонажа\r\n * @param {Object} game - класс игры \r\n * @param {Integer} x - начальная координата по x \r\n * @param {Integer} y - начальная координата по y\r\n * @param {Integer} width - ширина персонажа \r\n * @param {Integer} height - высота персонажа\r\n * @param {Integer} step - скорость или ширина шага\r\n * @param {String} direction - направление ходьбы по умолчанию (right или left)\r\n * @param {Boolean} standing - стоит или движется\r\n * @param {Integer} health - количество здоровья\r\n * @param {Integer} damage - сила урона\r\n * @param {Integer} damageArea - область атаки в пикселях\r\n * @param {Image} rightWalkImg - изображение для движения вправо\r\n * @param {Image} leftWalkImg - избражение для движения влево \r\n * @param {Image} attackImg - избражение для атаки \r\n * @param {Image} deathImg - избражение для смерти \r\n */\r\nclass Character\r\n{\r\n    constructor(game, x, y, width, height, step, damageArea, rightWalkImg, leftWalkImg)\r\n    {\r\n        this.game = game;\r\n            this.screen = this.game.screen;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.y0 = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.damageArea = damageArea;\r\n\r\n        this.rightWalkImg = rightWalkImg;\r\n        this.leftWalkImg = leftWalkImg;\r\n\r\n        this.step = step; //скорость передвижения и длинна шага\r\n        \r\n        this.standing = false; // стоит ли\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    init()\r\n    {\r\n        var rightWalkImg = this.rightWalkImg,\r\n            leftWalkImg = this.leftWalkImg,\r\n            direction = this.direction,\r\n            x = this.x, \r\n            y = this.y\r\n        // let ctx = this.screen.context;\r\n        // ctx.clearRect(this.x, this.y, this.width, this.height);\r\n        if(direction == 'right')\r\n        {\r\n            this.screen.drawImage(x, y, rightWalkImg, this.width, this.height);\r\n        } else {\r\n            // ctx.save();\r\n            // ctx.scale(-1, 1)\r\n            // ctx.translate(this.width, 0)\r\n            // this.screen.context.setTransform(1, .2, 0, 1, 0, 0); \r\n            this.screen.drawImage(x, y, leftWalkImg, this.width, this.height);\r\n            // ctx.restore();\r\n        }\r\n    }\r\n\r\n    moveRight()\r\n    {\r\n        var step = this.step;\r\n        this.x += step;\r\n        this.direction = 'right';\r\n        this.init();\r\n    }\r\n\r\n    moveLeft()\r\n    {\r\n        var step = this.step;\r\n        this.direction = 'left';\r\n        this.init()\r\n        if(this.x - (step + 10) < 0)\r\n        {\r\n            this.x = step + 10;\r\n            this.y = this.y0;\r\n        }\r\n        this.x -= step;\r\n    }\r\n}\n\n//# sourceURL=webpack://knight/./layout/assets/js/abstract-main/character.js?");

/***/ }),

/***/ "./layout/assets/js/abstract-main/scene.js":
/*!*************************************************!*\
  !*** ./layout/assets/js/abstract-main/scene.js ***!
  \*************************************************/
/*! namespace exports */
/*! export Scene [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Scene\": () => /* binding */ Scene\n/* harmony export */ });\n/**\r\n * Абстрактный класс сцены\r\n */\r\nclass Scene\r\n{\r\n    constructor(game, sceneTag)\r\n    {\r\n        this.game = game;\r\n            this.player = game.player;\r\n\r\n        // клавиатура\r\n        this.control = this.game.control\r\n\r\n        // объект экрана\r\n        this.screen = this.game.screen;\r\n        this.images = this.screen.images;\r\n\r\n        this.dom = this.game.dom;\r\n        this.scene = this.dom.getDivByClass(sceneTag);\r\n        this.sceneTag = sceneTag;\r\n\r\n        this.animation = this.game.textAnimation;\r\n        this.status = this.constructor.WORKING;\r\n\r\n        this.timer = 0; // счётчик для интервалов\r\n        \r\n    }\r\n\r\n    // статус сцены (различные условия сцен)\r\n    static get WORKING() { return 'WORKING'; }\r\n    static get LOADED() { return 'MENU'; }\r\n    static get START_GAME() { return 'START_GAME'; }\r\n    static get GAME_OVER() { return 'GAME_OVER'; }\r\n    static get GAME_WIN() { return 'GAME_WIN'; }\r\n    static get FINISHED() { return 'FINISHED'; }\r\n\r\n    // запуск или перезапуск сцены\r\n    init()\r\n    {\r\n        this.status = this.constructor.WORKING; // определяет, что сцена активна, либо переключить на следующую\r\n    }\r\n\r\n    finish(status)\r\n    {\r\n        this.status = status;\r\n    }\r\n\r\n    /**\r\n     * Выполнение функции с интервалом\r\n     */\r\n    update(time)\r\n    {\r\n        if(this.timer == 0)\r\n        {\r\n            this.interval = time\r\n        }\r\n        if(this.timer != 0 && (time - this.timer) > 3000)\r\n        {\r\n            console.log('aga')\r\n            this.timer = 0;\r\n            // for(let enemy in this.enemies)\r\n            // {\r\n                // enemy = this.enemies[enemy];\r\n                // setInterval(enemy.attack(), enemy.attackTime)\r\n            // }\r\n        }\r\n    }\r\n\r\n    render(time)\r\n    {\r\n    }\r\n\r\n     /**\r\n     * Гибкая функция, определяющая местоположение точки x объекта\r\n     * так как карта в игре повторяющаяся, эта функция будет возвращать x объекта на отрезке повтора.\r\n     * Например, фактически x = 3100, карта повторяется каждые x%1500, тогда эта функция вернёт x = 100\r\n     * Необходимо для статичного изменения координаты (например, подъём на повторяющийся холм)\r\n     * @return int\r\n     */\r\n    getX(object)\r\n    {\r\n            let xArr = String(object.x).split('');\r\n            let point = xArr.splice(-4, 4);\r\n            point = Number((String(point).replace(/[\\s,]/g, '')));\r\n\r\n            return point % (2 * (this.screen.width));\r\n    }\r\n}\n\n//# sourceURL=webpack://knight/./layout/assets/js/abstract-main/scene.js?");

/***/ }),

/***/ "./layout/assets/js/animation/text-animation.js":
/*!******************************************************!*\
  !*** ./layout/assets/js/animation/text-animation.js ***!
  \******************************************************/
/*! namespace exports */
/*! export TextAnimation [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TextAnimation\": () => /* binding */ TextAnimation\n/* harmony export */ });\n\r\n/**\r\n * Класс для анимации текста\r\n * Функции:\r\n * anmimateText - анимирует текст, будто его печатают\r\n * flasahingText - мигающий текст\r\n */\r\nclass TextAnimation\r\n{\r\n    // аргумент конструктора - это текст ('text'), либо персонаж ('charachter')\r\n    constructor(game)\r\n    {\r\n        this.game = game;\r\n    }\r\n\r\n    /**\r\n     * анимирует текст, будто его печатают\r\n     * @param {String} textTag - тэг текста, который надо анимировать\r\n     * @param {Int} time - время печати в милисекундах\r\n     */\r\n    animateText(textTag, time)\r\n    {        \r\n        let tags = document.getElementsByTagName(textTag);\r\n\r\n        for (let item of tags) {\r\n            let str = item.innerHTML.split(\"\");\r\n            item.innerHTML = '';\r\n            str.forEach(this.game.text.tagsOut);\r\n            (function animate() \r\n            {\r\n                let running = setTimeout(animate, time);\r\n                str.length > 0 ? item.innerHTML += str.shift() : clearTimeout(running); \r\n            })();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Анимация мерцающего текста\r\n     * @tag Тэг элемента\r\n     * @color1 Первый цвет\r\n     * @color2 Второй цвет\r\n     */\r\n    flashingText(tag, color1, color2)\r\n    {\r\n        let self = this.game;\r\n        let elm = self.dom.getElementByTag(tag);\r\n\r\n        //сколько какой цвет по времени\r\n        let i = 0, \r\n            s = [color2, color1],\r\n            t = [800, 800]; \r\n            \r\n        function animate()\r\n        {   \r\n            i ^= 1\r\n            elm.style.color = s[i];\r\n            setTimeout(animate,t[i]);\r\n        }\r\n        animate()\r\n    }\r\n}\n\n//# sourceURL=webpack://knight/./layout/assets/js/animation/text-animation.js?");

/***/ }),

/***/ "./layout/assets/js/characters/_enemy.js":
/*!***********************************************!*\
  !*** ./layout/assets/js/characters/_enemy.js ***!
  \***********************************************/
/*! namespace exports */
/*! export Enemy [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Enemy\": () => /* binding */ Enemy\n/* harmony export */ });\n/* harmony import */ var _abstract_main_character__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../abstract-main/character */ \"./layout/assets/js/abstract-main/character.js\");\n\r\n\r\n/**\r\n * Абстрактный класс врага\r\n */\r\nclass Enemy extends _abstract_main_character__WEBPACK_IMPORTED_MODULE_0__.Character\r\n{\r\n    constructor(game, x, y)\r\n    {\r\n        super(game, x, y)\r\n        this.y0 = y;\r\n        this.direction = 'left';\r\n        \r\n        this.player = this.game.player; // игрок\r\n\r\n        // цвет и высота полоски здоровья\r\n        this.healthColor = '#14c94c';\r\n        this.healthHeight = 5;\r\n\r\n        // интервал между атаками\r\n        this.intervalTimer = 0;\r\n        this.attackInterval = 1000;\r\n    }\r\n\r\n    /**\r\n     * Эффект \"прыжка\" у врага в движении\r\n     * Прыжок опфределяет синусоида.\r\n     * Первое число регулирует внутренний угол (Math.sin(x/n)), второе - выпуклость (bend)\r\n     */\r\n    jump()\r\n    {\r\n        this.y = this.y0 - f(this.x);\r\n        function f(x)\r\n        {\r\n            let bend = 48\r\n            return Math.sin(x / 30) * bend;\r\n        }\r\n    }\r\n\r\n    init()\r\n    {\r\n        var rightWalkImg = this.rightWalkImg,\r\n            leftWalkImg = this.leftWalkImg,\r\n            direction = this.direction,\r\n            x = this.x, \r\n            y = this.y,\r\n            // полоска здоровья\r\n            healthX = x + 50,\r\n            healthY = y - 10\r\n\r\n        if(direction == 'right')\r\n        {\r\n            this.screen.fillRect(this.healthColor, healthX, healthY, this.health, this.healthHeight);\r\n            this.screen.drawImage(x, y, rightWalkImg, this.width, this.height);\r\n        } else {            \r\n            this.screen.fillRect(this.healthColor, healthX, healthY, this.health, this.healthHeight);\r\n            this.screen.drawImage(x, y, leftWalkImg, this.width, this.height);\r\n        }\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Атакуют игрока\r\n     * Интервал определяется через this.attackInterval, у каждого класса может быть своим\r\n     * Проверка, находится ли x игрока в диапазоне удара\r\n     */\r\n    attack(time)\r\n    {\r\n        if(this.intervalTimer == 0)\r\n        {\r\n            this.intervalTimer = time\r\n        }\r\n        if(this.intervalTimer != 0 && (time - this.intervalTimer) > this.attackInterval)\r\n        {\r\n            if((this.player.x >= this.x - this.damageArea) && (this.player.x <= this.x + this.damageArea))\r\n            {\r\n                var attackRightImg = this.attackRightImg,\r\n                    attackLeftImg = this.attackLeftImg,\r\n                    direction = this.direction,\r\n                    x = this.x, \r\n                    y = this.y,\r\n                    // полоска здоровья\r\n                    healthX = x + 50,\r\n                    healthY = y - 10\r\n\r\n                if(direction == 'right')\r\n                {\r\n                    this.screen.fillRect(this.healthColor, healthX, healthY, this.health, this.healthHeight);\r\n                    this.screen.drawImage(x, y, attackRightImg, this.width, this.height);\r\n                } else {            \r\n                    this.screen.fillRect(this.healthColor, healthX, healthY, this.health, this.healthHeight);\r\n                    this.screen.drawImage(x, y, attackLeftImg, this.width, this.height);\r\n                }\r\n\r\n                this.player.health -= this.damage;\r\n                if(this.player.health < 0)\r\n                {\r\n                    this.player.health = 0;\r\n                }\r\n            }\r\n            \r\n            this.intervalTimer = 0;\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack://knight/./layout/assets/js/characters/_enemy.js?");

/***/ }),

/***/ "./layout/assets/js/characters/dog.js":
/*!********************************************!*\
  !*** ./layout/assets/js/characters/dog.js ***!
  \********************************************/
/*! namespace exports */
/*! export Dog [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Dog\": () => /* binding */ Dog\n/* harmony export */ });\n/* harmony import */ var _enemy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_enemy */ \"./layout/assets/js/characters/_enemy.js\");\n\r\n\r\n/**\r\n * Класс эльфа\r\n */\r\nclass Dog extends _enemy__WEBPACK_IMPORTED_MODULE_0__.Enemy\r\n{\r\n    constructor(game, x, y)\r\n    {\r\n        super(game, x, y)\r\n        this.width = 100;\r\n        this.height = 55;\r\n\r\n        this.health = 15;\r\n        this.damage = 2;\r\n        this.damageArea = 50;\r\n\r\n        this.attackInterval = 500; // уменьшенный интервал атаки\r\n\r\n        this.rightWalkImg = 'dog';\r\n        this.leftWalkImg = 'dog_reverse';\r\n        this.attackRightImg = 'dog';\r\n        this.attackLeftImg = 'dog_reverse';\r\n\r\n        this.step = 3; //скорость передвижения и длинна шага\r\n    }\r\n\r\n     /**\r\n     * Особый эффект \"прыжка\" для собаки\r\n     * Прыжок опфределяет синусоида.\r\n     * Первое число регулирует внутренний угол (Math.sin(x/n)), второе - выпуклость (bend)\r\n     */\r\n    jump()\r\n    {\r\n        this.y = this.y0 - f(this.x);\r\n        function f(x)\r\n        {\r\n            let bend = 18\r\n            return Math.sin(x / 30) * bend;\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack://knight/./layout/assets/js/characters/dog.js?");

/***/ }),

/***/ "./layout/assets/js/characters/elf.js":
/*!********************************************!*\
  !*** ./layout/assets/js/characters/elf.js ***!
  \********************************************/
/*! namespace exports */
/*! export Elf [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Elf\": () => /* binding */ Elf\n/* harmony export */ });\n/* harmony import */ var _enemy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_enemy */ \"./layout/assets/js/characters/_enemy.js\");\n\r\n\r\n/**\r\n * Класс эльфа\r\n */\r\nclass Elf extends _enemy__WEBPACK_IMPORTED_MODULE_0__.Enemy\r\n{\r\n    constructor(game, x, y)\r\n    {\r\n        super(game, x, y)\r\n        this.width = 100;\r\n        this.height = 115;\r\n\r\n        this.health = 30;\r\n        this.damage = 5;\r\n        this.damageArea = 80;\r\n\r\n        this.rightWalkImg = 'elf';\r\n        this.leftWalkImg = 'elf_reverse';\r\n        this.attackRightImg = 'elf_attack_right';\r\n        this.attackLeftImg = 'elf_attack_left';\r\n\r\n        this.step = 2; //скорость передвижения и длинна шага\r\n    }\r\n}\n\n//# sourceURL=webpack://knight/./layout/assets/js/characters/elf.js?");

/***/ }),

/***/ "./layout/assets/js/characters/greench.js":
/*!************************************************!*\
  !*** ./layout/assets/js/characters/greench.js ***!
  \************************************************/
/*! namespace exports */
/*! export Greench [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Greench\": () => /* binding */ Greench\n/* harmony export */ });\n/* harmony import */ var _enemy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_enemy */ \"./layout/assets/js/characters/_enemy.js\");\n\r\n\r\n/**\r\n * Класс эльфа\r\n */\r\nclass Greench extends _enemy__WEBPACK_IMPORTED_MODULE_0__.Enemy\r\n{\r\n    constructor(game, x, y)\r\n    {\r\n        super(game, x, y)\r\n        this.width = 120;\r\n        this.height = 135;\r\n\r\n        this.health = 60;\r\n        this.damage = 10;\r\n        this.damageArea = 80;\r\n\r\n        this.rightWalkImg = 'greench';\r\n        this.leftWalkImg = 'greench_reverse';\r\n        this.attackRightImg = 'greench_attack_right';\r\n        this.attackLeftImg = 'greench_attack_left';\r\n\r\n        this.step = 1; //скорость передвижения и длинна шага\r\n    }\r\n}\n\n//# sourceURL=webpack://knight/./layout/assets/js/characters/greench.js?");

/***/ }),

/***/ "./layout/assets/js/characters/player.js":
/*!***********************************************!*\
  !*** ./layout/assets/js/characters/player.js ***!
  \***********************************************/
/*! namespace exports */
/*! export Player [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Player\": () => /* binding */ Player\n/* harmony export */ });\n/* harmony import */ var _abstract_main_character__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../abstract-main/character */ \"./layout/assets/js/abstract-main/character.js\");\n\r\n\r\n/**\r\n * Класс игрока\r\n */\r\nclass Player extends _abstract_main_character__WEBPACK_IMPORTED_MODULE_0__.Character\r\n{\r\n    constructor(game, nickname, x, y)\r\n    {\r\n        super(game, x, y)\r\n        this.direction = 'right';\r\n        this.nickname = nickname;\r\n\r\n        this.y0 = y;\r\n        this.width = 100;\r\n        this.height = 115;\r\n        this.standing = true;\r\n\r\n        this.health = 100;\r\n        this.damageArea = 100;\r\n\r\n        // регенерация\r\n        this.healthRegenInterval = 2000; // интервал регенерации, в милисекундах\r\n        this.healthRegen = 2; // количество регенерируемого здоровья\r\n\r\n        this.rightWalkImg = 'player';\r\n        this.leftWalkImg = 'player_reverse';\r\n\r\n        this.step = 5; //скорость передвижения и длинна шага\r\n        \r\n        this.direction = 'right';\r\n        this.intervalTimer = 0;\r\n    }\r\n\r\n    healthRegeneration(time)\r\n    {\r\n        if(this.intervalTimer == 0)\r\n        {\r\n            this.intervalTimer = time\r\n        }\r\n        if(this.intervalTimer != 0 && (time - this.intervalTimer) > this.healthRegenInterval)\r\n        {\r\n            if(this.health < 100)\r\n            {\r\n                if(this.health + this.healthRegen > 100)\r\n                {\r\n                    this.health = 100;\r\n                }\r\n                else\r\n                {\r\n                    this.health += this.healthRegen;   \r\n                }\r\n            }\r\n            this.intervalTimer = 0;\r\n        }\r\n    }\r\n\r\n    regen(time)\r\n    {\r\n        this.healthRegeneration(time)\r\n    }\r\n\r\n    animation(filesNumber, fileFormat)\r\n    {\r\n        var num = 1;\r\n        var imgs = {}\r\n        const self = this;\r\n\r\n\r\n        for(let i = 0; i < filesNumber; i++)\r\n        {\r\n            let image = new Image(100,200);\r\n            image.src = '../character animation/knight/sprites/idle/idle000' + num + '.' + fileFormat;\r\n            image.onerror = function() {\r\n                this.onerror = null;\r\n            };\r\n            // console.log(image)\r\n            \r\n            imgs[num] = image;\r\n\r\n            num++\r\n        \r\n        }\r\n        return imgs\r\n    }\r\n\r\n    standing(time)\r\n    {\r\n        const self = this;\r\n        setInterval(function() {\r\n            self.animation();\r\n        }, 1000)\r\n    }\r\n}\n\n//# sourceURL=webpack://knight/./layout/assets/js/characters/player.js?");

/***/ }),

/***/ "./layout/assets/js/dom/element.js":
/*!*****************************************!*\
  !*** ./layout/assets/js/dom/element.js ***!
  \*****************************************/
/*! namespace exports */
/*! export DOMElement [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DOMElement\": () => /* binding */ DOMElement\n/* harmony export */ });\n/**\r\n * Работает с элементами внутри DOM дерева\r\n */\r\nclass DOMElement\r\n{\r\n    constructor()\r\n    {\r\n    }\r\n\r\n    /**\r\n     * возвращает родительский блок, относящийся к конкретной сцене\r\n     * в аргументы передаётся класс див блока сцены, например меню - \"screen screen-start show\"\r\n     */\r\n    getDivByClass(divClass)\r\n    {\r\n        return document.querySelector('.' + divClass);\r\n    }\r\n\r\n    /**\r\n     * возвращает DOM элемент по тэгу\r\n     * в аргументы передаётся тэг\r\n     */\r\n    getElementByTag(tag)\r\n    {\r\n        return document.querySelector(tag);\r\n    }\r\n\r\n    /**\r\n    * Возвращает дочерний элемент\r\n    * В аргументы передаётся класс родителя\r\n    */\r\n\r\n}\n\n//# sourceURL=webpack://knight/./layout/assets/js/dom/element.js?");

/***/ }),

/***/ "./layout/assets/js/dom/text.js":
/*!**************************************!*\
  !*** ./layout/assets/js/dom/text.js ***!
  \**************************************/
/*! namespace exports */
/*! export Text [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Text\": () => /* binding */ Text\n/* harmony export */ });\n/**\r\n * Предназначен для работы с текстом внутри страницы\r\n */\r\nclass Text\r\n{\r\n    constructor()\r\n    {\r\n    }\r\n\r\n    // Вырезает все теги из innerHTML, преназначено для использования с forEach\r\n    // После каждого вырезанного тега вставляет текст с новой строки\r\n    // Полезно, например, для перебора текста внутри тега <ul>\r\n    tagsOut(element, index, array) {{\r\n        let badIndexes = [];\r\n        if (element == '<')\r\n        {\r\n            let i = index;\r\n            let counter = 1\r\n            while(array[i] != '>')\r\n            {\r\n                badIndexes.push(i);\r\n                counter++;\r\n                i++;\r\n            }\r\n            array = array.splice(index, counter, '<li>')\r\n        }\r\n        }\r\n        return element;\r\n    }\r\n}\n\n//# sourceURL=webpack://knight/./layout/assets/js/dom/text.js?");

/***/ }),

/***/ "./layout/assets/js/game.js":
/*!**********************************!*\
  !*** ./layout/assets/js/game.js ***!
  \**********************************/
/*! namespace exports */
/*! export Game [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Game\": () => /* binding */ Game\n/* harmony export */ });\n/* harmony import */ var _interface_screen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interface/screen */ \"./layout/assets/js/interface/screen.js\");\n/* harmony import */ var _interface_hud__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./interface/hud */ \"./layout/assets/js/interface/hud.js\");\n/* harmony import */ var _animation_text_animation__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./animation/text-animation */ \"./layout/assets/js/animation/text-animation.js\");\n/* harmony import */ var _mechanics_control_state__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mechanics/control-state */ \"./layout/assets/js/mechanics/control-state.js\");\n/* harmony import */ var _abstract_main_scene__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./abstract-main/scene */ \"./layout/assets/js/abstract-main/scene.js\");\n/* harmony import */ var _scenes_menu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scenes/menu */ \"./layout/assets/js/scenes/menu.js\");\n/* harmony import */ var _scenes_game_process__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scenes/game-process */ \"./layout/assets/js/scenes/game-process.js\");\n/* harmony import */ var _characters_player__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./characters/player */ \"./layout/assets/js/characters/player.js\");\n/* harmony import */ var _characters_elf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./characters/elf */ \"./layout/assets/js/characters/elf.js\");\n/* harmony import */ var _dom_element__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dom/element */ \"./layout/assets/js/dom/element.js\");\n/* harmony import */ var _dom_text__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dom/text */ \"./layout/assets/js/dom/text.js\");\n/* harmony import */ var _mechanics_pause__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./mechanics/pause */ \"./layout/assets/js/mechanics/pause.js\");\n\r\n\r\n\r\n\r\n\r\n    \r\n    \r\n\r\n    \r\n    \r\n\r\n\r\n\r\n\r\n/**\r\n * Главный класс игры\r\n * Объединяет между собой все модули\r\n */\r\nclass Game \r\n{\r\n    // ожидаем объект с настройками, но он не обязательный и может быть пустым\r\n    // window.innerWidth и innerHeight передают размер экрана\r\n    constructor({width = 1240, height = window.innerHeight} = {})\r\n    {\r\n        this.isPaused = false;\r\n\r\n        this.screen = new _interface_screen__WEBPACK_IMPORTED_MODULE_0__.Screen(width, height, 'screen-game');\r\n        // грузим картинки\r\n        this.screen.loadImages({\r\n            \r\n            player: '../character animation/knight/sprites/idle/idle0001.png',\r\n            player_reverse: '../character animation/knight/sprites/idle/idle_reverse.png',\r\n            player_death: '../character animation/knight/sprites/death/death0049.png',\r\n            attack1_right: '../character animation/knight/sprites/attack1/attack10014.png',\r\n            attack1_left: '../character animation/knight/sprites/attack1/attack1_reverse.png',\r\n            block_right: '../character animation/knight/sprites/block/block0012.png',\r\n            block_left: '../character animation/knight/sprites/block/block_reverse.png',\r\n\r\n            elf: '../character animation/enemies/elf/sprites/Run/Run_001.png',\r\n            elf_reverse: '../character animation/enemies/elf/sprites/Run/Run_reverse.png',\r\n            elf_attack_right: '../character animation/enemies/elf/sprites/Attack/Attack2_013.png',\r\n            elf_attack_left: '../character animation/enemies/elf/sprites/Attack/Attack_reverse.png',\r\n            elf_death_right: '../character animation/enemies/elf/sprites/Death/Die_019.png',\r\n            elf_death_left: '../character animation/enemies/elf/sprites/Death/Die_reverse.png',\r\n\r\n            greench: '../character animation/enemies/greench/sprites/Run/Run_003.png',\r\n            greench_reverse: '../character animation/enemies/greench/sprites/Run/Run_reverse.png',\r\n            greench_attack_right: '../character animation/enemies/greench/sprites/Attack/Attack2_010.png',\r\n            greench_attack_left: '../character animation/enemies/greench/sprites/Attack/Attack_reverse.png',\r\n            greench_death_right: '../character animation/enemies/greench/sprites/Death/Die_019.png',\r\n            greench_death_left: '../character animation/enemies/greench/sprites/Death/Die_reverse.png',\r\n\r\n            dog: '../character animation/enemies/dog/sprites/run/1.png',\r\n            dog_reverse: '../character animation/enemies/dog/sprites/run/Run_reverse.png'\r\n        });\r\n        this.control = new _mechanics_control_state__WEBPACK_IMPORTED_MODULE_5__.ControlState();\r\n            this.player = new _characters_player__WEBPACK_IMPORTED_MODULE_3__.Player(this);\r\n            this.elf = new _characters_elf__WEBPACK_IMPORTED_MODULE_4__.Elf(this);\r\n\r\n        this.text = new _dom_text__WEBPACK_IMPORTED_MODULE_6__.Text;\r\n        this.dom = new _dom_element__WEBPACK_IMPORTED_MODULE_7__.DOMElement;\r\n\r\n        this.hud = new _interface_hud__WEBPACK_IMPORTED_MODULE_8__.HUD(this);\r\n        this.textAnimation = new _animation_text_animation__WEBPACK_IMPORTED_MODULE_9__.TextAnimation(this);\r\n        this.scenes = {\r\n            menu: new _scenes_menu__WEBPACK_IMPORTED_MODULE_1__.Menu(this),\r\n            gameProcess: new _scenes_game_process__WEBPACK_IMPORTED_MODULE_2__.GameProcess(this)\r\n        };\r\n        this.currentScene = this.scenes.menu; // устанавливаем текущую сцену\r\n        this.currentScene.init();\r\n\r\n        this.pause = new _mechanics_pause__WEBPACK_IMPORTED_MODULE_10__.Pause(this);\r\n    }\r\n\r\n    /**\r\n     * @param {string} status\r\n     * Механизм переключения сцен\r\n     * В аргументы передаётся статус текущей сцены\r\n     */\r\n    changeScene(status)\r\n    {\r\n        switch (status) \r\n        {\r\n            case _abstract_main_scene__WEBPACK_IMPORTED_MODULE_11__.Scene.MENU:\r\n                return this.scenes.menu;\r\n\r\n            case _abstract_main_scene__WEBPACK_IMPORTED_MODULE_11__.Scene.START_GAME:\r\n                return this.scenes.gameProcess;\r\n\r\n            default:\r\n                return this.scenes.menu;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Функция для requestAnimationFrame\r\n     * Здесь же логика паузы \r\n     */\r\n    frame(time)\r\n    {\r\n        // проверка на паузу\r\n        if(!this.isPaused)\r\n        {\r\n            this.pause.cancel()\r\n\r\n            // механизм переключения сцен: если сцена неактивна, то берём следующую\r\n            if(this.currentScene.status != _abstract_main_scene__WEBPACK_IMPORTED_MODULE_11__.Scene.WORKING)\r\n            {\r\n                this.currentScene = this.changeScene(this.currentScene.status);\r\n                this.currentScene.init();\r\n            }\r\n            this.currentScene.render(time);\r\n        } \r\n        else\r\n        {\r\n            this.pause.init()\r\n        }\r\n\r\n        requestAnimationFrame(time => this.frame(time))\r\n    }\r\n\r\n    run()\r\n    {\r\n        requestAnimationFrame(time => this.frame(time))\r\n    }\r\n}\n\n//# sourceURL=webpack://knight/./layout/assets/js/game.js?");

/***/ }),

/***/ "./layout/assets/js/interface/hud.js":
/*!*******************************************!*\
  !*** ./layout/assets/js/interface/hud.js ***!
  \*******************************************/
/*! namespace exports */
/*! export HUD [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HUD\": () => /* binding */ HUD\n/* harmony export */ });\n/**\r\n * Интерфейс игрока\r\n */\r\nclass HUD \r\n{\r\n    constructor(game)\r\n    {\r\n        this.game = game;\r\n            this.player = game.player;\r\n            this.dom = this.game.dom;\r\n\r\n        this.divClasses = {\r\n            username: 'user-info',\r\n            health: 'panel-xp',\r\n            magic: 'panel-mp',\r\n            timer: 'timer',\r\n            kills: 'kills'\r\n        }\r\n\r\n        for (let div in this.divClasses) {\r\n            this.divClasses[div] = this.dom.getDivByClass(this.divClasses[div])\r\n        }\r\n\r\n        // ширина полоски здоровья\r\n        this.health.style.width = '200px';\r\n        this.healthFirstWidth = parseInt(this.health.style.width);\r\n\r\n        // таймер\r\n        this.startTime;\r\n        this.difference;\r\n        this.tInterval;\r\n        this.savedTime;\r\n        this.paused = 0;\r\n        this.running = 0;\r\n\r\n        this.intervalTimer;\r\n    }\r\n\r\n    /**\r\n    * геттеры для каждого блока интерфейса как html элемента\r\n    */\r\n    get username() { return this.divClasses.username };\r\n    get health() { return this.divClasses.health };\r\n    get magic() { return this.divClasses.magic };\r\n    get timer() { return this.divClasses.timer };\r\n    get kills() { return this.divClasses.kills };\r\n\r\n    init()\r\n    {\r\n        this.setUsername();\r\n        this.setTimer();\r\n        // console.log(this.divClasses)\r\n    }\r\n\r\n    render()\r\n    {\r\n        this.setHealth();\r\n    }\r\n\r\n    setUsername()\r\n    {\r\n        this.username.innerHTML = this.player.nickname;\r\n    }\r\n\r\n    /**\r\n     * Уменьшение ширины полоски здоровья в зависимости от количества здоровья\r\n     */\r\n    setHealth()\r\n    {\r\n        let healthN = document.querySelector('.' + this.health.className + ' span')\r\n        healthN.innerText = this.player.health;\r\n\r\n        let percent = (this.healthFirstWidth / 100)\r\n        this.health.style.width = this.player.health * percent + 'px';\r\n    }\r\n\r\n    setTimer()\r\n    {\r\n\r\n        const self = this;\r\n        var timerArray = this.timer.innerHTML.split(':');    \r\n\r\n        function startTimer()\r\n        {\r\n            if(!self.running){\r\n                self.startTime = new Date().getTime();\r\n                self.tInterval = setInterval(getShowTime, 1);\r\n                self.paused = 0;\r\n                self.running = 1;\r\n            }\r\n        }\r\n\r\n        function getShowTime()\r\n        {\r\n            let updatedTime = new Date().getTime();\r\n            if (self.savedTime){\r\n                self.difference = (updatedTime - self.startTime) + self.savedTime;\r\n            } else {\r\n                self.difference =  updatedTime - self.startTime;\r\n            }\r\n            var minutes = Math.floor((self.difference % (1000 * 60 * 60)) / (1000 * 60));\r\n            var seconds = Math.floor((self.difference % (1000 * 60)) / 1000);\r\n\r\n            minutes = (minutes < 10) ? \"0\" + minutes : minutes;\r\n            seconds = (seconds < 10) ? \"0\" + seconds : seconds;\r\n\r\n            self.timer.innerHTML = timerArray[0] + ': ' + minutes + ':' + seconds\r\n\r\n        }\r\n\r\n        startTimer()\r\n    }\r\n\r\n    pauseTimer()\r\n    {\r\n        if (!this.difference)\r\n        {\r\n            // если таймер не стартовал\r\n        } \r\n        else if (!this.paused)\r\n        {\r\n            clearInterval(this.tInterval);\r\n            this.savedTime = this.difference;\r\n            this.paused = 1;\r\n            this.running = 0;\r\n        } else {\r\n            this.setTimer();\r\n        }\r\n    }\r\n\r\n    resetTimer()\r\n    {\r\n        clearInterval(this.tInterval);\r\n        this.savedTime = 0;\r\n        this.difference = 0;\r\n        this.paused = 0;\r\n        this.running = 0;\r\n        this.timer.innerHTML = 'Timer: 00:00'\r\n    }\r\n}\n\n//# sourceURL=webpack://knight/./layout/assets/js/interface/hud.js?");

/***/ }),

/***/ "./layout/assets/js/interface/screen.js":
/*!**********************************************!*\
  !*** ./layout/assets/js/interface/screen.js ***!
  \**********************************************/
/*! namespace exports */
/*! export Screen [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Screen\": () => /* binding */ Screen\n/* harmony export */ });\n/* harmony import */ var _mechanics_image_loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mechanics/image-loader */ \"./layout/assets/js/mechanics/image-loader.js\");\n\r\n\r\n/**\r\n * Класс всего экрана и канваса\r\n * @parentTag Тэг элемента, к которому нужно присоединять канвас. \r\n * Если пустой, то родителем автоматически станет body\r\n */\r\nclass Screen\r\n{\r\n    constructor(width, height, parentTag)\r\n    {\r\n        this.parentTag = parentTag;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.canvas = this.createCanvas(width, height);\r\n        document.body.style.overflow = 'hidden';\r\n        this.context = this.canvas.getContext('2d');\r\n        this.images = {};\r\n        this.isImagesLoaded = false;\r\n        this.center = this.width / 2;\r\n    }\r\n\r\n    // создадим канвас, либо если есть канвас, то используем его\r\n    createCanvas(width, height)\r\n    {\r\n        let elements = document.getElementsByTagName('canvas');\r\n        let canvas = elements[0] || document.createElement('canvas');\r\n\r\n        switch(this.parentTag)\r\n        {\r\n            case undefined: this.parentTag = document.body; break\r\n            default: this.parentTag = document.querySelector('.' + this.parentTag); break\r\n        }\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        this.parentTag.appendChild(canvas);\r\n        return canvas;\r\n    }\r\n\r\n    loadImages(imageFiles)\r\n    {\r\n        const loader = new _mechanics_image_loader__WEBPACK_IMPORTED_MODULE_0__.ImageLoader(imageFiles);\r\n        loader.load().then((names) => {\r\n            this.images = Object.assign(this.images, loader.images);\r\n            this.isImagesLoaded = true;\r\n            // console.log(names)\r\n        })\r\n    }\r\n\r\n    fill(color)\r\n    {\r\n        this.context.fillStyle = color;\r\n        this.context.fillRect(0,0,this.width,this.height)\r\n    }\r\n\r\n    print(x, y, text)\r\n    {\r\n        this.context.fillStyle = \"#FFFFFF\";\r\n        this.context.font = \"22px Georgia\";\r\n        this.context.fillText(text, x, y);\r\n    }\r\n\r\n    drawImage(x, y, imageName, w = 100, h = 100)\r\n    {\r\n        this.context.drawImage(this.images[imageName], x, y, w, h);\r\n    }\r\n\r\n    drawSprite(sprite)\r\n    {\r\n        this.context.drawImage(this.images[sprite.imageName],\r\n            sprite.sourceX, sprite.sourceY, sprite.width, sprite.height,\r\n            sprite.x, sprite.y, sprite.width, sprite.height);\r\n    }\r\n\r\n    clearRect()\r\n    {\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\r\n    }\r\n\r\n    fillRect(color, x, y, width, height)\r\n    {\r\n        this.context.fillStyle = color;\r\n        this.context.fillRect(x, y, width, height);\r\n    }\r\n}\n\n//# sourceURL=webpack://knight/./layout/assets/js/interface/screen.js?");

/***/ }),

/***/ "./layout/assets/js/main.js":
/*!**********************************!*\
  !*** ./layout/assets/js/main.js ***!
  \**********************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./game */ \"./layout/assets/js/game.js\");\n\r\n\r\nwindow.onload = () => {\r\n    const knight = new _game__WEBPACK_IMPORTED_MODULE_0__.Game();\r\n    knight.run();\r\n}\r\n\n\n//# sourceURL=webpack://knight/./layout/assets/js/main.js?");

/***/ }),

/***/ "./layout/assets/js/mechanics/control-state.js":
/*!*****************************************************!*\
  !*** ./layout/assets/js/mechanics/control-state.js ***!
  \*****************************************************/
/*! namespace exports */
/*! export ControlState [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ControlState\": () => /* binding */ ControlState\n/* harmony export */ });\n/**\r\n * Класс клавиатуры\r\n */\r\nclass ControlState\r\n{\r\n    constructor()\r\n    {\r\n        this.up = false;\r\n        this.down = false;\r\n        this.left = false;\r\n        this.right = false;\r\n        this.space = false;\r\n        this.keyMap = new Map([\r\n            [37,'left'],[39,'right'],[38,'up'],[40,'down'],[32,'space'] \r\n        ]);\r\n        window.addEventListener('keydown', (event) => this.update(event, true));\r\n        window.addEventListener('keyup', (event) => this.update(event, false));\r\n\r\n        this.end = 27;\r\n    }\r\n\r\n    update(event, pressed)\r\n    {\r\n        if(this.keyMap.has(event.keyCode))\r\n        {\r\n            // event.preventDefault();\r\n            event.stopPropagation();\r\n            this[this.keyMap.get(event.keyCode)] = pressed;\r\n        }\r\n    }\r\n\r\n\r\n}\n\n//# sourceURL=webpack://knight/./layout/assets/js/mechanics/control-state.js?");

/***/ }),

/***/ "./layout/assets/js/mechanics/image-loader.js":
/*!****************************************************!*\
  !*** ./layout/assets/js/mechanics/image-loader.js ***!
  \****************************************************/
/*! namespace exports */
/*! export ImageLoader [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ImageLoader\": () => /* binding */ ImageLoader\n/* harmony export */ });\n/**\r\n * Класс, который грузит все картинки до начала игры\r\n */\r\nclass ImageLoader\r\n{\r\n    constructor(imageFiles)\r\n    {\r\n        this.imageFiles = imageFiles;\r\n        this.images = {};\r\n    }\r\n\r\n    load()\r\n    {\r\n        const promises = [];\r\n        for (let name in this.imageFiles)\r\n        {\r\n            promises.push(this.loadImage(name, this.imageFiles[name]))\r\n        }\r\n        return Promise.all(promises);\r\n    }\r\n\r\n    loadImage(name, src)\r\n    {\r\n        return new Promise((resolve) => {\r\n            const image = new Image();\r\n            this.images[name] = image;\r\n            image.onload = () => resolve(name);\r\n            image.onerror = function() {\r\n                console.log(image);\r\n            };\r\n            image.src = src;\r\n        })\r\n    }\r\n\r\n    loadImagesFromFolder(folder)\r\n    {\r\n        // const fs = require('fs');\r\n        // const dir = './scenes';\r\n\r\n        // fs.readFile(\"file.txt\", \"utf8\", function(error, text) {\r\n        //     if (error)\r\n        //       throw error;\r\n        //     console.log(\"А в файле том было:\", text);\r\n        //   });\r\n    }\r\n}\n\n//# sourceURL=webpack://knight/./layout/assets/js/mechanics/image-loader.js?");

/***/ }),

/***/ "./layout/assets/js/mechanics/pause.js":
/*!*********************************************!*\
  !*** ./layout/assets/js/mechanics/pause.js ***!
  \*********************************************/
/*! namespace exports */
/*! export Pause [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Pause\": () => /* binding */ Pause\n/* harmony export */ });\n/**\r\n * Класс паузы\r\n */\r\nclass Pause\r\n{\r\n    constructor(game)\r\n    {\r\n        this.game = game;\r\n        this.screen = this.game.scenes.gameProcess.scene;\r\n        this.div = document.querySelector('#pause');\r\n\r\n        const self = this;\r\n\r\n        // пауза по нажатию на esc\r\n        window.onkeydown = function(e) {\r\n            const key = e.keyCode\r\n          \r\n            switch(key) {\r\n              case 27: self.game.isPaused = !self.game.isPaused; break\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    init()\r\n    {\r\n        // стоп таймера\r\n        this.game.hud.paused = 0; \r\n        this.game.hud.pauseTimer();\r\n\r\n        // стоп регенерации\r\n        this.game.player.intervalTimer = 0;\r\n\r\n        // эффект блюра при паузе\r\n        this.screen.style.filter = 'blur(5px)';\r\n        this.div.hidden = false;\r\n    }\r\n\r\n    cancel()\r\n    {\r\n        this.div.hidden = true;\r\n        this.screen.style.filter = '';\r\n        this.game.hud.paused = 1; \r\n        this.game.hud.pauseTimer();\r\n    }\r\n}\n\n//# sourceURL=webpack://knight/./layout/assets/js/mechanics/pause.js?");

/***/ }),

/***/ "./layout/assets/js/scenes/game-process.js":
/*!*************************************************!*\
  !*** ./layout/assets/js/scenes/game-process.js ***!
  \*************************************************/
/*! namespace exports */
/*! export GameProcess [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GameProcess\": () => /* binding */ GameProcess\n/* harmony export */ });\n/* harmony import */ var _abstract_main_scene__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../abstract-main/scene */ \"./layout/assets/js/abstract-main/scene.js\");\n/* harmony import */ var _characters_elf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../characters/elf */ \"./layout/assets/js/characters/elf.js\");\n/* harmony import */ var _characters_greench__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../characters/greench */ \"./layout/assets/js/characters/greench.js\");\n/* harmony import */ var _characters_dog__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../characters/dog */ \"./layout/assets/js/characters/dog.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nclass GameProcess extends _abstract_main_scene__WEBPACK_IMPORTED_MODULE_3__.Scene\r\n{\r\n    constructor(game)\r\n    {\r\n        super(game, 'screen-game');\r\n\r\n        // интерфейс игрока\r\n        this.hud = this.game.hud;\r\n\r\n        this.player = this.game.player;\r\n            // начальные координаты\r\n            this.player.x = 10;\r\n            this.player.y = this.screen.height - 200;\r\n            this.player.y0 = this.screen.height - 200;\r\n\r\n        this.enemies = {\r\n            'elf': new _characters_elf__WEBPACK_IMPORTED_MODULE_0__.Elf(this.game),\r\n            'greench': new _characters_greench__WEBPACK_IMPORTED_MODULE_1__.Greench(this.game),\r\n            'dog': new _characters_dog__WEBPACK_IMPORTED_MODULE_2__.Dog(this.game)\r\n        }\r\n\r\n        // определение начальных точек для врагов\r\n        // если враг низкий (напимер, собака), тогда он находится ближе к земле\r\n        for(let enemy in this.enemies)\r\n        {\r\n            enemy = this.enemies[enemy];\r\n            enemy.x = this.screen.width + 100;\r\n            enemy.y = this.screen.height - 200;\r\n\r\n            if(enemy.height > 100)\r\n            {\r\n                enemy.y0 = this.screen.height - 200;\r\n            }\r\n            else\r\n            {\r\n                enemy.y0 = this.screen.height - 120;\r\n            }\r\n\r\n        }\r\n\r\n        this.sceneWidth = parseInt(this.screen.width * 6.3);\r\n        this.background = {\r\n            sceneTag: 'screen-game',\r\n            x: this.screen.width / 2\r\n        };\r\n\r\n        this.x = 0;\r\n\r\n    }\r\n\r\n    // onload\r\n    init()\r\n    {\r\n        this.hud.init();\r\n\r\n        this.player.init()\r\n\r\n        super.init();\r\n    }\r\n\r\n    /**\r\n     * Функция, работающая постоянно\r\n     */\r\n    render(time)\r\n    {\r\n        this.player.regen(time)\r\n        this.hud.render();\r\n\r\n        this.update(time);\r\n\r\n        let ctx = this.screen.context;\r\n        ctx.clearRect(0, 0, this.screen.width, this.screen.height);\r\n\r\n        this.moving();\r\n        this.enemyMove();\r\n\r\n        this.player.init()\r\n        for(let enemy in this.enemies)\r\n        {\r\n            enemy = this.enemies[enemy];\r\n            enemy.init()\r\n            enemy.attack(time)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Движение врага относительно игрока\r\n     * \"Враг\" - абстрактный класс, так что условие работает для каждого созданного врага под этим классом\r\n     * Если игрок бежит вправо, то он обгоняет врагов слева и приближает врага справа\r\n     * Если игрок бежит влево, то наоборот\r\n     * Примечание: до и после движения фона позиция игрока = \"стоит\" во избежание багов движения врагов\r\n     */\r\n    enemyMove()\r\n    {\r\n        for(let enemy in this.enemies)\r\n        {\r\n            enemy = this.enemies[enemy];\r\n\r\n            // включает эффект прыжка у врага\r\n            enemy.jump();\r\n\r\n            // игрок бежит ко врагам вправо\r\n            if(this.player.standing == false && this.player.direction == 'right')\r\n            {\r\n                enemy.x += enemy.step - (enemy.step + this.player.step);\r\n            \r\n                // враги слева гонятся за игроком\r\n                if(enemy.x + enemy.damageArea < this.player.x)\r\n                {\r\n                    enemy.x += enemy.step * 1.5;\r\n                    enemy.direction = 'right';\r\n                }\r\n            }\r\n            //если игрок \"бежит\" влево\r\n            else if(this.player.standing == false && this.player.direction == 'left')\r\n            {\r\n                enemy.direction = 'left'; \r\n                enemy.x -= enemy.step * 1.5 - this.player.step;\r\n\r\n                // враги с другой стороны гонятся за игроком\r\n                if(enemy.x + enemy.damageArea < this.player.x)\r\n                {\r\n                    enemy.direction = 'right'; \r\n                    enemy.x += enemy.step * 2;\r\n                }\r\n            }\r\n            else if((enemy.x - enemy.damageArea > this.player.x) && this.player.standing == true)\r\n            {\r\n                enemy.direction = 'left'; \r\n                enemy.x -= enemy.step;\r\n            }\r\n            else if((enemy.x + enemy.damageArea < this.player.x) && this.player.standing == true)\r\n            {\r\n                enemy.direction = 'right'; \r\n                enemy.x += enemy.step;\r\n            }\r\n    \r\n            \r\n        }\r\n    }\r\n\r\n    /**\r\n     * Передвижение по карте, вызов разных состояний (функций) в зависимости от местоположения\r\n     * Завершение сцены игры по достижению конца поля\r\n     * Проверка, стоит ли игрок\r\n     */\r\n    moving()\r\n    {   \r\n        if(this.player.x < this.screen.center && this.background.x <= this.screen.center)\r\n        {\r\n            this.background.x = this.screen.center\r\n            if(this.control.right)\r\n            {\r\n                this.player.standing = true;\r\n                this.playerMove('right')\r\n            } \r\n            else if(this.control.left) \r\n            {\r\n                this.player.standing = true;\r\n                this.playerMove('left')   \r\n            }\r\n            else if(!this.control.right && !this.control.left)\r\n            {\r\n                this.player.standing = true;\r\n            }\r\n        } \r\n        // при приближении игрока к концу поля\r\n        else if(this.background.x >= this.sceneWidth)\r\n        {\r\n            this.background.x = this.sceneWidth;\r\n            if(this.control.right)\r\n            {\r\n                this.player.standing = true;\r\n                this.player.moveRight()\r\n            \r\n                // завершение игры по достижению конца поля\r\n                if(this.player.x > this.screen.width)\r\n                {\r\n                    alert('победа!')\r\n                    // self.finish(Scene.START_GAME);\r\n                }\r\n            } \r\n            else if(this.control.left) \r\n            {\r\n                this.player.standing = true;\r\n                if(this.player.x < this.screen.center)\r\n                {\r\n                    this.background.x--;\r\n                    this.backgroundMove('left');\r\n                }\r\n                this.player.moveLeft()  \r\n            }\r\n            else if(!this.control.right && !this.control.left)\r\n            {\r\n                this.player.standing = true;\r\n            }\r\n        }\r\n        // параллакс\r\n        else\r\n        {\r\n            if(this.control.right)\r\n            {\r\n                this.player.standing = false;\r\n                this.backgroundMove('right')\r\n            } \r\n            else if(this.control.left) \r\n            {\r\n                this.player.standing = false;\r\n                this.backgroundMove('left')\r\n                \r\n                if(this.player.x >= this.screen.center && this.background.x <= this.screen.center)\r\n                {\r\n                    this.background.x = this.screen.center\r\n                    if(this.control.left) \r\n                    {\r\n                        this.playerMove('left')   \r\n                    }\r\n                } \r\n            }\r\n            else if(!this.control.right && !this.control.left)\r\n            {\r\n                this.player.standing = true;\r\n            }\r\n        }\r\n        \r\n    }   \r\n\r\n     /**\r\n     * Движение игрока до центра экрана\r\n     * Использует значение функции getX (читать выше),\r\n     * которое сравнивает с текщим местоположжением игрока, чтобы определить\r\n     * подъёмы и спуски последнего\r\n     * @param {string} direction - 'left' или 'right' \r\n     */\r\n    playerMove(direction)\r\n    {\r\n            switch(direction)\r\n            {\r\n                case 'right': this.player.moveRight(); break\r\n                case 'left': this.player.moveLeft(); break\r\n            }\r\n\r\n            let point = this.getX(this.player)\r\n\r\n            // движение по холмам\r\n            if(point < 150) \r\n            {    \r\n                // this.screen.context.setTransform(1, .2, 0, 1, 0, 0); \r\n                switch(direction)\r\n                {\r\n                    case 'right': this.player.y = this.player.y + Math.sin(1); break\r\n                    case 'left': this.player.y = this.player.y - Math.sin(1); break\r\n                }\r\n            }\r\n            else if(point > 150 && point < 500)\r\n            {\r\n                this.player.y = this.player.y;\r\n            }\r\n            else if(point > 500)\r\n            {     \r\n                switch(direction)\r\n                {\r\n                    case 'right': this.player.y = this.player.y - Math.sin(1); break\r\n                    case 'left': this.player.y = this.player.y + Math.sin(1); break\r\n                }\r\n            } \r\n    }\r\n\r\n     /**\r\n     * В центре экран игрок останавливается, и движение начинает экран\r\n     * Параллакс эффект высчитывается по формуле:\r\n     * k * (x - x0)\r\n     * k = коэфицент скорости\r\n     * x = самая-левая-видимая-координата-фона = (x-координата-фона * шаг)  / х-координата-центра-экрана)\r\n     * x0 = смещение фона вправо изначально\r\n     * чем выше итогове значение, тем выше скорость движения\r\n     * \r\n     * @param {string} direction - 'left' или 'right' \r\n     */\r\n    backgroundMove(direction, k = 1.7, step = this.player.step)\r\n    {\r\n        const center = this.screen.center;\r\n        // установавливаем для игрока движение вправо\r\n        this.player.direction = direction;\r\n        this.player.init();\r\n\r\n        // параллакс (движение фона)\r\n        this.scene.style.backgroundPosition = k * ((this.background.x * step / center) - step) + '%';\r\n        \r\n        // х-координата фона растёт\r\n        \r\n        switch(direction)\r\n        {\r\n            case 'right':\r\n                this.background.x += this.player.step;\r\n                this.x++;\r\n                break\r\n            \r\n            case 'left':\r\n                this.background.x -= this.player.step;\r\n                this.x--;\r\n                break\r\n        }\r\n        \r\n        this.player.y = this.player.y0 - f(this.x);\r\n\r\n        function f(x) \r\n        {\r\n            let bend = 48 // изгиб\r\n            // синусоида, первое число регулирует внутренний угол, второе - выпуклость\r\n            return Math.sin(x / 60) * bend;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n  \n\n//# sourceURL=webpack://knight/./layout/assets/js/scenes/game-process.js?");

/***/ }),

/***/ "./layout/assets/js/scenes/menu.js":
/*!*****************************************!*\
  !*** ./layout/assets/js/scenes/menu.js ***!
  \*****************************************/
/*! namespace exports */
/*! export Menu [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Menu\": () => /* binding */ Menu\n/* harmony export */ });\n/* harmony import */ var _abstract_main_scene__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../abstract-main/scene */ \"./layout/assets/js/abstract-main/scene.js\");\n\r\n\r\n/**\r\n * Класс для сцены меню.\r\n * Обрабатывает блок с классом \"screen-start\".\r\n */\r\nclass Menu extends _abstract_main_scene__WEBPACK_IMPORTED_MODULE_0__.Scene\r\n{\r\n    constructor(game)\r\n    {\r\n        super(game, 'screen-start');\r\n        \r\n        // добавляем анимацию\r\n        this.animation.flashingText('h1', 'black', 'darkgrey');\r\n        this.animation.animateText('li', 50);\r\n    }\r\n\r\n    // onload\r\n    init()\r\n    {\r\n        super.init();\r\n    }\r\n\r\n    /**\r\n     * Функция, работающая постоянно\r\n     */\r\n    render(time)\r\n    {\r\n        // this.game.screen.drawSprite(this.lightBringer);\r\n        // super.render(time)\r\n        this.validateForm()\r\n    }\r\n\r\n    /**\r\n     * Проверяет, что форма не пустая\r\n     * Еслти форма не пустая, то активирует кнопку и передаёт nickname\r\n     */\r\n    validateForm()\r\n    {\r\n        let self = this;\r\n\r\n        let submit = document.querySelectorAll('.' + this.sceneTag + ' > .panel > form > input:last-child');\r\n        let form = document.getElementsByName('nickname');\r\n\r\n        switch(form[0].value.length)\r\n        {\r\n            case 0: \r\n                submit[0].style.background = '';\r\n                submit[0].disabled = 'true';\r\n            break\r\n\r\n            default:\r\n                submit[0].disabled = '';\r\n                submit[0].style.background = 'green';\r\n                submit[0].onclick = function(e)\r\n                {\r\n                    e.preventDefault()\r\n                    self.scene.hidden = 'true';\r\n                    self.finish(_abstract_main_scene__WEBPACK_IMPORTED_MODULE_0__.Scene.START_GAME);\r\n                    self.player.nickname = form[0].value;\r\n                }\r\n            break\r\n        }\r\n        \r\n        submit[0].onmouseout = function() {\r\n            this.style.background = '';\r\n        }\r\n    }\r\n\r\n    getNickname()\r\n    {\r\n\r\n    }\r\n}\n\n//# sourceURL=webpack://knight/./layout/assets/js/scenes/menu.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./layout/assets/js/main.js");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;